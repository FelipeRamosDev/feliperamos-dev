name: Maintenance Tasks

on:
  schedule:
    - cron: '0 1 * * 1' # Every Monday at 1 AM UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update dependencies
      run: |
        npm update
        npm audit fix --force || echo "Audit fix completed with warnings"

    - name: Check for updates
      id: updates
      run: |
        if git diff --quiet package-lock.json; then
          echo "updated=false" >> $GITHUB_OUTPUT
        else
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.updates.outputs.updated == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: Weekly dependency updates'
        body: |
          🔄 **Automated Dependency Updates**
          
          This PR contains weekly dependency updates:
          
          - Updated npm packages to latest compatible versions
          - Applied security fixes where available
          - Ran audit fix for known vulnerabilities
          
          **Generated by:** GitHub Actions Maintenance Workflow
          **Date:** ${{ github.event.schedule || 'Manual trigger' }}
        branch: chore/weekly-dependency-updates
        delete-branch: true

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest

    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoff = new Date();
          cutoff.setDate(cutoff.getDate() - 14); // Keep artifacts for 14 days
          
          for (const artifact of artifacts.data.artifacts) {
            const artifactDate = new Date(artifact.created_at);
            if (artifactDate < cutoff) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }

  security-scan:
    name: Enhanced Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate --json > audit-report.json || echo "Audit completed"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: audit-report.json
        retention-days: 30

    - name: Check for critical vulnerabilities
      run: |
        if npm audit --audit-level critical --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
          echo "⚠️ Critical vulnerabilities found!"
          npm audit --audit-level critical
          exit 1
        else
          echo "✅ No critical vulnerabilities found"
        fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Analyze bundle size
      run: |
        npm install -g bundlemon
        bundlemon --output json > bundle-report.json || echo "Bundle analysis completed"

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.run_number }}
        path: bundle-report.json
        retention-days: 30

    - name: Check bundle size limits
      run: |
        echo "📦 Bundle size analysis completed"
        echo "Check the uploaded artifacts for detailed bundle analysis"
